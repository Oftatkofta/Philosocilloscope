#include <SPI.h>
#include <avr/pgmspace.h>

byte latchPin = 5;  //Pin connected to ST_CP of 74HC595
byte clockPin = 13; //Pin connected to SH_CP of 74HC595
byte dataPin = 11;  //Pin connected to DS    of 74HC595
//byte YdataPin = 11;  //Pin connected to DS    of 74HC595

//byte shapeX[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240};
//byte shapeY[] = {0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240};
//int d;


void setup() {
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  pinMode(latchPin, OUTPUT);
  digitalWrite(latchPin, LOW);
  digitalWrite(clockPin, LOW);
  digitalWrite(dataPin, LOW);
//  d = 0;
SPI.beginTransaction(SPISettings(1600000, LSBFIRST, SPI_MODE0));
SPI.begin();


  }

void loop() {

    //if (d > sizeof(shapeX) - 1) {
    //d = 0;}
    
  //countup();
  for (int x = 0; x<256; x+=1){
    
    for (int y = 0; y<256; y+=1){
      SPI.transfer(y);
      latch();
      SPI.transfer(x);
      latch();
      //delay(1);
    }
  //delay(1);  
  }

  //SPI.transfer(shapeY[d]);
  //SPI.transfer(shapeX[d]);
  //shiftOut(dataPin, clockPin, LSBFIRST, shapeY[d]);
  //shiftOut(dataPin, clockPin, LSBFIRST, shapeX[d]);
  
   //latch();
   //d+=1;
}

void shifty(byte clockPin, byte dataPin, byte payload){
  byte writeOut = 0;
  byte mask = 128;
  for (byte i = 0; i<8; i++){
    writeOut = (mask & payload);
    mask = (mask >> 1) ;
    digitalWrite(clockPin, HIGH);
    digitalWrite(dataPin, writeOut);
    digitalWrite(clockPin, LOW);
    }
  }

void latch(){
  digitalWrite(latchPin, HIGH);
  digitalWrite(latchPin, LOW);
  }
  
void countup(){ 
  //count up routine
  for (byte j = 0; j < 256; j++) {
    shifty(clockPin, dataPin, j);
    shifty(clockPin, dataPin, 255-j);
    latch();
    //delay(1);
  }
}


